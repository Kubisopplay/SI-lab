{
  "path": "c:\\Studia\\6sem\\SI-lab\\lab1\\zad1.py",
  "unit_test": false,
  "functions": [],
  "script": "from helper import Node, get_distance, strtotime, timediff\nimport pandas as pd\nimport time\nimport threading\nfrom dateutil.relativedelta import *\ndef zad1(start, end, all_stops : dict, data : pd.DataFrame, start_hour):\n    startnode = Node(start, None, start_hour)\n    openlist = [startnode]\n    closedlist = []\n    while len(openlist) > 0:\n        print(\"openlist\",len(openlist))\n        print(\"closedlist\",len(closedlist))\n        openlist.sort(key=lambda x: x.f)\n        currentnode = openlist.pop()\n        closedlist.append(currentnode)\n        # success\n        if currentnode.name == end:\n            return get_path(currentnode, start)\n        else:\n            children = get_children(currentnode, all_stops, data)\n            for child in children:\n                if child in closedlist:\n                    continue\n                child = get_values(child, currentnode, end,start, all_stops)\n                for i in openlist:\n                    if child.name == i.name and child.g > i.g:\n                        continue\n                openlist.append(child)\n            \n\n\ndef get_path(currentnode, startnode):\n    path = []\n    while currentnode.parent is not None:\n        path.append(currentnode.name)\n        currentnode = currentnode.parent\n    path.append(startnode)\n    path.reverse()\n    return path\n\ndef get_children(currentnode : Node, all_stops, data : pd.DataFrame):\n    children = []\n    candidates = data.loc[data[\"start_stop\"] == currentnode.name]\n    for i in candidates.itertuples():\n        child = Node(i.end_stop, currentnode, i.arrival_time)\n        if child.time < currentnode.time:\n            continue\n        if timediff(child.time, currentnode.time) > 200:\n            continue\n        children.append(child)\n       \n    return children\n\n\n#magic happens here\ndef get_values(child : Node, currentnode : Node, end,start, all_stops):\n    child.g = get_distance(start, child.name)\n    child.h = get_distance(child.name, end) + timediff(child.time, currentnode.time)\n    child.f = child.g + child.h\n    return child\n"
}